{"version":3,"sources":["services/firebase.ts","Login.tsx","providers/UserProvider.tsx","pages/MainPage.tsx","services/database.ts","pages/CreatePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dotenv","config","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","googleProvider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","catch","error","console","log","message","logOut","signOut","then","Login","className","onClick","src","alt","UserContext","createContext","UserProvider","children","useState","user","setUser","useEffect","onAuthStateChanged","_user","a","Provider","value","MainPage","useContext","JSON","stringify","saveEvent","event","setDoc","doc","collection","uid","CreatePage","React","title","setTitle","description","setDescription","Date","date","setDate","creator","setCreator","numberOfPeopleMin","setNumberOfPeopleMin","numberOfPeopleMax","setNumberOfPeopleMax","borderWidth","borderRadius","padding","onSubmit","preventDefault","isRequired","id","type","onChange","target","initialValue","onDateChange","isInline","defaultValue","min","max","mt","colorScheme","theme","extendTheme","colors","brand","900","800","700","App","w","orientation","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.752a1f79.chunk.js","sourcesContent":["import dotenv from 'dotenv';\n//import firebase from \"firebase\";\n//import 'firebase/compat/auth';\n\nimport { initializeApp } from 'firebase/app'\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth'\nimport { getFirestore } from \"firebase/firestore\";\n\ndotenv.config();\ninitializeApp({\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId:  process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n});\n\nexport const auth = getAuth();\nexport const db = getFirestore();\n\nconst googleProvider = new GoogleAuthProvider()\nexport const signInWithGoogle = () => {\n  return signInWithPopup(auth, googleProvider).catch((error) => {\n    console.log(error.message);\n  })\n}\n\nexport const logOut = () => {\n  signOut(auth).then(()=> {\n  }).catch((error) => {\n    console.log(error.message)\n  })\n}\n","//import './Login.css'\nimport { signInWithGoogle } from './services/firebase';\n//import { Redirect } from 'react-router-dom';\n\nexport default function Login() {\n  //const [redirect, setRedirect] = useState(null)\n\n  /*useEffect(() => {\n    if (user) {\n      //setredirect('/dashboard')\n    }\n  }, [user])*/\n  //if (redirect) {\n    //<Redirect to={redirect}/>\n  //}\n  return (\n      <div className=\"login-buttons\">\n        <button className=\"login-provider-button\" onClick={signInWithGoogle}>\n        <img src=\"https://img.icons8.com/ios-filled/50/000000/google-logo.png\" alt=\"google icon\"/>\n        <span> Continue with Google</span>\n       </button>\n      </div>\n  );\n}","import React, {useState, useEffect,  createContext} from \"react\";\nimport { auth } from \"../services/firebase\"\nimport { onAuthStateChanged, User } from 'firebase/auth';\nexport const UserContext = createContext<User | null>(null);\n\n\nexport const UserProvider: React.FC = ({ children }) => {\n    const [user, setUser] = useState<User | null>(null)\n    useEffect(() => {\n        onAuthStateChanged(auth, async (_user: User | null) => {\n            setUser(_user)\n        })\n    }, [])\n\n    return (\n        <UserContext.Provider value={user}>{children}</UserContext.Provider>\n    )\n}","import React, { useContext } from 'react';\nimport { UserContext } from '../providers/UserProvider';\n\n\nexport const MainPage = () => {\n\n    const user = useContext(UserContext);\n\n   \n\n    return (\n        <div>\n            <div>\n                Current user{JSON.stringify(user)}\n            </div>\n            \n            <button>Create Event</button>\n\n            <h2>Events</h2>\n\n        </div>\n    )\n}","import { User } from \"firebase/auth\";\nimport { collection, collectionGroup, doc, setDoc, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\n\nexport const saveEvent = (user: User, event: object) => {\n    setDoc(doc(collection(db, 'users', user.uid, 'events')), event);\n}\n\nexport const getOwnEvents = (user: User) => {\n    return collection(db, 'users', user.uid, 'events');\n}\n\nexport const getAllEvents = () => {\n    return collectionGroup(db, 'events');\n}\n\nexport const listenAllEvents = (callback: (event: object) => void) => (\n    onSnapshot(\n        collectionGroup(db, 'events'),\n        (snapshot) => (callback(snapshot))\n    )\n)","import React, { useContext } from 'react';\nimport { Box, Button, FormControl, FormLabel, Input, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Stack, Textarea } from '@chakra-ui/react';\nimport { DatePicker } from '@orange_digital/chakra-datepicker';\nimport { UserContext } from '../providers/UserProvider';\nimport { saveEvent } from '../services/database';\n\n\n// Titel, desc, datum, creator, number of people? (min max),\nexport const CreatePage = () => {\n\n    const [title, setTitle] = React.useState('');\n    const [description, setDescription] = React.useState('');\n    const [date, setDate] = React.useState(new Date());\n    const [creator, setCreator] = React.useState('');\n    const [numberOfPeopleMin, setNumberOfPeopleMin] = React.useState(2);\n    const [numberOfPeopleMax, setNumberOfPeopleMax] = React.useState(10);\n\n    const user = useContext(UserContext);\n\n    return (\n        <div>\n            <h1>Create Page</h1>\n            <Box borderWidth='1px' borderRadius='lg' padding='2'>\n                <form \n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        console.log({title: title, description: description, date: date, creator: creator, numberOfPeopleMin: numberOfPeopleMin, numberOfPeopleMax: numberOfPeopleMax})\n                        user && saveEvent(user, {title: title, description: description, date: date, creator: creator, numberOfPeopleMin: numberOfPeopleMin, numberOfPeopleMax: numberOfPeopleMax});\n                    }}>\n\n                    <FormControl isRequired id=\"createEvent\" >\n                        <FormLabel>Title</FormLabel>\n                        <Input type=\"text\" onChange={(event) => setTitle(event.target.value)}/>\n                        <FormLabel>Description</FormLabel>\n                        <Textarea onChange={(event) => setDescription(event.target.value)}/>\n                        <FormLabel>Date</FormLabel>\n                        <DatePicker initialValue={new Date()} onDateChange={(date) => date && setDate(date)}/>\n                        <FormLabel>Creator</FormLabel>\n                        <Input type=\"text\" onChange={(event) => setCreator(event.target.value)}/>\n                        <FormLabel>Number of people</FormLabel>\n                        \n                        <Stack isInline>\n                            <NumberInput defaultValue={2} min={2} max={100}>\n                                <NumberInputField onChange={(event) => setNumberOfPeopleMin(+event.target.value)}/>\n                                <NumberInputStepper>\n                                    <NumberIncrementStepper />\n                                    <NumberDecrementStepper />\n                                </NumberInputStepper>\n                            </NumberInput>\n                            <NumberInput defaultValue={10} min={2} max={100}>\n                                <NumberInputField onChange={(event) => setNumberOfPeopleMax(+event.target.value)}/>\n                                <NumberInputStepper>\n                                    <NumberIncrementStepper />\n                                    <NumberDecrementStepper />\n                                </NumberInputStepper>\n                            </NumberInput>\n                        </Stack>\n                        \n                        <Button\n                            mt={4}\n                            colorScheme=\"teal\"\n                            type=\"submit\"\n                        >\n                            Create Event\n                        </Button>\n                    </FormControl>\n                </form>\n\n            </Box>\n            <Button\n                mt={4}\n                colorScheme=\"teal\"\n                type=\"submit\"\n                onClick={() => saveEvent(user!, {\n                    title: 'Test',\n                    description: 'Test',\n                    date: new Date(),\n                })}\n            >\n                Create Event\n            </Button>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\nimport Login from './Login';\nimport { UserProvider } from './providers/UserProvider';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { MainPage } from './pages/MainPage';\nimport { logOut } from './services/firebase';\nimport { Box, ChakraProvider, extendTheme, Heading } from \"@chakra-ui/react\"\nimport { CreatePage } from './pages/CreatePage';\n\nconst colors = {\n  brand: {\n    900: \"#1a365d\",\n    800: \"#153e75\",\n    700: \"#2a69ac\",\n  }\n}\n\nconst theme = extendTheme({ colors });\n\nfunction App() {\n\n  return (\n    <ChakraProvider theme={theme}>\n      <UserProvider>\n        <Box w='100%' padding='0 20% 0 20%'>\n        <Heading orientation='horizontal'>MeetHub</Heading>\n        \n          <HashRouter>\n            <Switch>\n              <Route path='/' component={CreatePage} />\n              <Route path='/' component={MainPage}/>\n            </Switch>\n          </HashRouter>\n          <MainPage/>\n          <Login />\n            <button onClick={logOut}>\n              Logout\n            </button>\n        </Box>\n      </UserProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}