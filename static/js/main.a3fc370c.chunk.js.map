{"version":3,"sources":["services/firebase.ts","Login.tsx","providers/UserProvider.tsx","pages/MainPage.tsx","pages/CreatePage.tsx","services/database.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dotenv","config","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","googleProvider","GoogleAuthProvider","signInWithGoogle","signInWithPopup","catch","error","console","log","message","logOut","signOut","then","Login","alignSelf","leftIcon","src","alt","onClick","UserContext","createContext","UserProvider","children","useState","user","setUser","useEffect","onAuthStateChanged","_user","a","Provider","value","MainPage","useContext","JSON","stringify","CreatePage","React","title","setTitle","description","setDescription","Date","date","setDate","creator","setCreator","numberOfPeopleMin","setNumberOfPeopleMin","numberOfPeopleMax","setNumberOfPeopleMax","callback","e","docs","map","d","data","onSnapshot","collectionGroup","snapshot","borderWidth","borderRadius","padding","onSubmit","event","preventDefault","setDoc","doc","collection","uid","saveEvent","isRequired","id","type","onChange","target","initialValue","onDateChange","isInline","defaultValue","min","max","mt","colorScheme","getDocs","query","orderBy","getOwnEvents","events","theme","extendTheme","initialColorMode","useSystemColorMode","App","w","orientation","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3fc370c.chunk.js","sourcesContent":["import dotenv from 'dotenv';\n//import firebase from \"firebase\";\n//import 'firebase/compat/auth';\n\nimport { initializeApp } from 'firebase/app'\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth'\nimport { getFirestore } from \"firebase/firestore\";\n\ndotenv.config();\ninitializeApp({\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId:  process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n});\n\nexport const auth = getAuth();\nexport const db = getFirestore();\n\nconst googleProvider = new GoogleAuthProvider()\nexport const signInWithGoogle = () => {\n  return signInWithPopup(auth, googleProvider).catch((error) => {\n    console.log(error.message);\n  })\n}\n\nexport const logOut = () => {\n  signOut(auth).then(()=> {\n  }).catch((error) => {\n    console.log(error.message)\n  })\n}\n","//import './Login.css'\nimport { Button } from '@chakra-ui/button';\nimport { signInWithGoogle } from './services/firebase';\n//import { Redirect } from 'react-router-dom';\n\nexport const Login = () => (\n    <Button\n      alignSelf='center'\n      leftIcon={<img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/24px-Google_%22G%22_Logo.svg.png\"} alt=''/>}\n      onClick={signInWithGoogle}>\n      Continue with Google\n    </Button>\n  );","import React, {useState, useEffect,  createContext} from \"react\";\nimport { auth } from \"../services/firebase\"\nimport { onAuthStateChanged, User } from 'firebase/auth';\nexport const UserContext = createContext<User | null>(null);\n\n\nexport const UserProvider: React.FC = ({ children }) => {\n    const [user, setUser] = useState<User | null>(null)\n    useEffect(() => {\n        onAuthStateChanged(auth, async (_user: User | null) => {\n            setUser(_user)\n        })\n    }, [])\n\n    return (\n        <UserContext.Provider value={user}>{children}</UserContext.Provider>\n    )\n}","import React, { useContext } from 'react';\nimport { UserContext } from '../providers/UserProvider';\n\n\nexport const MainPage = () => {\n\n    const user = useContext(UserContext);\n\n   \n\n    return (\n        <div>\n            <div>\n                Current user{JSON.stringify(user)}\n            </div>\n            \n            <button>Create Event</button>\n\n            <h2>Events</h2>\n\n        </div>\n    )\n}","import React, { useContext, useEffect } from 'react';\nimport { Box, Button, Center, FormControl, FormLabel, Input, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Stack, Textarea } from '@chakra-ui/react';\nimport { DatePicker } from '@orange_digital/chakra-datepicker';\nimport { UserContext } from '../providers/UserProvider';\nimport { getAllEvents, getOwnEvents, listenAllEvents, saveEvent } from '../services/database';\nimport { Login } from '../Login';\n\n\n// Titel, desc, datum, creator, number of people? (min max),\nexport const CreatePage = () => {\n\n    const [title, setTitle] = React.useState('');\n    const [description, setDescription] = React.useState('');\n    const [date, setDate] = React.useState(new Date());\n    const [creator, setCreator] = React.useState('');\n    const [numberOfPeopleMin, setNumberOfPeopleMin] = React.useState(2);\n    const [numberOfPeopleMax, setNumberOfPeopleMax] = React.useState(10);\n\n    const user = useContext(UserContext);\n\n    useEffect(() => {\n        listenAllEvents(e => {\n            console.log('Listening on events...', e.docs.map(d => d.data()));\n        })\n    }, [])\n\n    return (\n        <div>\n            <h1>Create Page</h1>\n            <Box borderWidth='1px' borderRadius='lg' padding='2'>\n                {user ? \n                <form \n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        console.log({title: title, description: description, date: date, creator: creator, numberOfPeopleMin: numberOfPeopleMin, numberOfPeopleMax: numberOfPeopleMax})\n                        user && saveEvent(user, {title: title, description: description, date: date, creator: creator, numberOfPeopleMin: numberOfPeopleMin, numberOfPeopleMax: numberOfPeopleMax});\n                    }}>\n\n                    <FormControl isRequired id=\"createEvent\" >\n                        <FormLabel>Title</FormLabel>\n                        <Input type=\"text\" onChange={(event) => setTitle(event.target.value)}/>\n                        <FormLabel>Description</FormLabel>\n                        <Textarea onChange={(event) => setDescription(event.target.value)}/>\n                        <FormLabel>Date</FormLabel>\n                        <DatePicker initialValue={new Date()} onDateChange={(date) => date && setDate(date)}/>\n                        <FormLabel>Creator</FormLabel>\n                        <Input type=\"text\" onChange={(event) => setCreator(event.target.value)}/>\n                        <FormLabel>Number of people</FormLabel>\n                        \n                        <Stack isInline>\n                            <NumberInput defaultValue={2} min={2} max={100}>\n                                <NumberInputField onChange={(event) => setNumberOfPeopleMin(+event.target.value)}/>\n                                <NumberInputStepper>\n                                    <NumberIncrementStepper />\n                                    <NumberDecrementStepper />\n                                </NumberInputStepper>\n                            </NumberInput>\n                            <NumberInput defaultValue={10} min={2} max={100}>\n                                <NumberInputField onChange={(event) => setNumberOfPeopleMax(+event.target.value)}/>\n                                <NumberInputStepper>\n                                    <NumberIncrementStepper />\n                                    <NumberDecrementStepper />\n                                </NumberInputStepper>\n                            </NumberInput>\n                        </Stack>\n                        \n                        <Button\n                            mt={4}\n                            colorScheme=\"teal\"\n                            type=\"submit\"\n                        >\n                            Create Event\n                        </Button>\n                    </FormControl>\n                </form>\n    : <div>\n        <Center>\n            <Box padding='5em'>\n                <Stack>\n                    <h1>Please login to create an event</h1>\n                    <Login />\n                </Stack>\n            </Box>\n        </Center>\n    </div>}\n\n            </Box>\n            <Button\n                mt={4}\n                colorScheme=\"teal\"\n                type=\"submit\"\n                onClick={() => {\n                    getOwnEvents(user!).then(events => console.log(events.docs.map(doc => doc.data())));\n                }}\n            >\n                Create Event\n            </Button>\n\n            <Button\n                mt={4}\n                colorScheme=\"teal\"\n                type=\"submit\"\n                onClick={() => {\n                    getAllEvents().then(events => console.log(events.docs.map(doc => doc.data())));\n                }}\n            >\n                Create Event\n            </Button>\n        </div>\n    );\n};\n","import { User } from \"firebase/auth\";\nimport { collection, collectionGroup, doc, setDoc, getDocs, onSnapshot, orderBy, query, QuerySnapshot, DocumentData } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\n\nexport const saveEvent = (user: User, event: object) => {\n    setDoc(doc(collection(db, 'users', user.uid, 'events')), event);\n}\n\nexport const getOwnEvents = (user: User) => {\n    return getDocs(query(collection(db, 'users', user.uid, 'events'), orderBy('date')));\n}\n\nexport const getAllEvents = () => {\n    //return getDocs(query(collectionGroup(db, 'events'), orderBy('date')));\n    return getDocs(collectionGroup(db, 'events')); // replace by the line above once index is built\n}\n\nexport const listenAllEvents = (callback: (event: QuerySnapshot<DocumentData>) => void) => (\n    onSnapshot(\n        collectionGroup(db, 'events'),\n        (snapshot) => (callback(snapshot))\n    )\n)","import React from 'react';\nimport './App.css';\nimport { Login } from './Login';\nimport { UserProvider } from './providers/UserProvider';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { MainPage } from './pages/MainPage';\nimport { logOut } from './services/firebase';\nimport { Box, ChakraProvider, extendTheme, Heading, ThemeConfig } from \"@chakra-ui/react\"\nimport { CreatePage } from './pages/CreatePage';\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: true,\n}\n\nconst theme = extendTheme({ config });\n\nfunction App() {\n\n  return (\n    <ChakraProvider theme={theme}>\n      <UserProvider>\n        <Box w='100%' padding='5em 20% 5em 20%'>\n        <Heading orientation='horizontal'>MeetHub</Heading>\n        \n          <HashRouter>\n            <Switch>\n              <Route path='/' component={CreatePage} />\n              <Route path='/' component={MainPage}/>\n            </Switch>\n          </HashRouter>\n          <MainPage/>\n          <Login />\n            <button onClick={logOut}>\n              Logout\n            </button>\n        </Box>\n      </UserProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}